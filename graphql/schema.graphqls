schema {
  query: QueryRoot
  mutation: MutationRoot
}

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""Attach extra information to a given type."""
directive @typePolicy(
  """
  A selection set containing fields used to compute the cache key of an object. Referenced fields must have non-nullable scalar types. Order is important.
  """
  keyFields: String!
) on OBJECT | INTERFACE

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type BoolPayload {
  isOk: Boolean!
}

scalar DateTime

type Me {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MutationRoot {
  preSignUpload(input: PreSignUploadInput!): PreSignUploadPayload!
  userCreate(input: UserCreateInput!): Me!
  userUpdate(input: UserUpdateInput!): Me!
  userDelete: BoolPayload!
}

input PreSignUploadInput {
  path: PreSignUploadPath!
}

enum PreSignUploadPath {
  ASSET
  TEMP
}

type PreSignUploadPayload {
  fileId: String!
  key: String!
  url: String!
}

type QueryRoot {
  health: String!
  preSignDownload(key: String!): String!
  me: Me!
  users: [User!]!
  user(id: ID!): User!
}

type User {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateInput {
  name: String!
}

input UserUpdateInput {
  name: String!
}